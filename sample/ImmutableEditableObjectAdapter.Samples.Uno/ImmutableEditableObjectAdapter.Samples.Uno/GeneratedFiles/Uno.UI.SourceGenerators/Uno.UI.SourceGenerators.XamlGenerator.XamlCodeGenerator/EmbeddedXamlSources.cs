#nullable enable
// <autogenerated />
#pragma warning disable 618 // Ignore obsolete members warnings
#pragma warning disable 105 // Ignore duplicate namespaces
#pragma warning disable 1591 // Ignore missing XML comment warnings
#pragma warning disable CS8669 // Ignore annotation for nullable reference types
#pragma warning disable CS9113 // Parameter is unread
#pragma warning disable // Disable all warnings for this generated file

// Register an embedded sources provider for Hot Reload
[assembly: global::System.Reflection.AssemblyMetadata("Uno.HotDesign.HotReloadEmbeddedXamlSourceFilesProvider", "ImmutableEditableObjectAdapter.Samples.Uno.__Sources__.EmbeddedXamlSourcesProvider")]

namespace ImmutableEditableObjectAdapter.Samples.Uno.__Sources__;

/// <summary>
/// Provides access to the embedded XAML sources
/// </summary>
/// <remarks>
/// This class is used to provide the embedded XAML sources to the Hot Reload engine.
/// This is not intended to be used directly by application code.
/// WON'T BE GENERATED ON RELEASE BUILDS
/// </remarks>
internal static class EmbeddedXamlSourcesProvider
{
	// key=absolute file path
	private static global::System.Collections.Generic.IDictionary<string, (string ActualPath, global::System.Func<(string Hash, string Payload)> Getter)>? _XamlSources;

	// hash of all the paths
	private static volatile string? _filesListHash;

	// get the current value of the update counter
	private static volatile uint _updateCounter;

	private static readonly global::System.Text.Encoding _utf8 = global::System.Text.Encoding.UTF8;

	// The content of this method only changes when the file list changes
	private static global::System.Collections.Generic.IDictionary<string, (string ActualPath, global::System.Func<(string Hash, string Payload)> Getter)> EnsureInitialize()
	{
		const string currentListHash = "018d26224df0331537b18c35c36fc44d"; // that's the hash of all the paths, used to detect changes in the file list following a HR operation

		// Determine if the sources have been updated or not initialized yet
		var previousHashList = _XamlSources;
		var needsUpdate = previousHashList is null || _filesListHash != currentListHash;

		if (needsUpdate)
		{
			var xamlSources = new global::System.Collections.Generic.Dictionary<string, (string ActualPath, global::System.Func<(string Hash, string Payload)> Getter)>(5, global::System.StringComparer.OrdinalIgnoreCase);

			// Use method groups to avoid closure allocation and ensure no lambda is created, to allow proper HR support
			xamlSources[NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\App.xaml")] = (NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\App.xaml"), GetSources_App_92fe2aed9105f6632fee946d52fcfbc5);
			xamlSources[NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\MainPage.xaml")] = (NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\MainPage.xaml"), GetSources_MainPage_d7a1b33751a06f8c2b641494e8c25f72);
			xamlSources[NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\SecondPage.xaml")] = (NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\SecondPage.xaml"), GetSources_SecondPage_43d52a7b8ef7245df955f57a30f3e88c);
			xamlSources[NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\Shell.xaml")] = (NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\Shell.xaml"), GetSources_Shell_06fa6f052ecac338a77d04463cc3e67a);
			xamlSources[NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Styles\ColorPaletteOverride.xaml")] = (NormalizePath(@"C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Styles\ColorPaletteOverride.xaml"), GetSources_ColorPaletteOverride_6acd3e31fd1cf74bad6fe8ae493e7985);

			if (global::System.Threading.Interlocked.CompareExchange(ref _XamlSources, xamlSources, previousHashList) == previousHashList)
			{
				// The sources were updated successfully (no other thread modified them concurrently)
				_filesListHash = currentListHash;
				_updateCounter++;
			}
		}

		return _XamlSources;
	}

	/// <summary>
	/// Gets the current update counter, used to detect changes in the sources.
	/// </summary>
	/// <remarks>
	/// This counter is incremented each time a Hot Reload sources update is detected.
	/// </remarks>
	public static uint UpdateCounter
	{
		get
		{
			EnsureInitialize();
			return _updateCounter;
		}
	}

	public static global::System.Collections.Generic.IReadOnlyList<string> GetXamlFilesList() => [.. EnsureInitialize().Keys];

	public static string? GetNormalizedFileName(string path)
	{
		// Will return the normalized path if the file exists, or null if it doesn't.
		// (the returned value will be constant for the file and can be used in a dictionary using an ordinal comparer)
		var normalizedPath = NormalizePath(path);
		return EnsureInitialize().TryGetValue(normalizedPath, out var entry) ? entry.ActualPath : null;
	}

	public static (string ActualPath, string Hash, string Payload)? GetXamlFile(string path)
	{
		var normalizedPath = NormalizePath(path);
		if (EnsureInitialize().TryGetValue(normalizedPath, out var entry))
		{
			var sources = entry.Getter();
			return (entry.ActualPath, sources.Hash, sources.Payload);
		}
		return null;
	}

	private static string NormalizePath(string path) => path.Replace('\\', '/');

	#region Sources for C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\App.xaml
	private static (string hash, string payload) GetSources_App_92fe2aed9105f6632fee946d52fcfbc5()
	{
		return (
			"e3c71d7bd6b4eaf5b89918b36ce01977ea0c432139680fdeaed7f49ccde44e5f", // hash
			_utf8.GetString("""
			<Application x:Class="ImmutableEditableObjectAdapter.Samples.Uno.App"
			       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			       xmlns:utum="using:Uno.Toolkit.UI.Material">
			
			  <Application.Resources>
			    <ResourceDictionary>
			      <ResourceDictionary.MergedDictionaries>
			        <!-- Load WinUI resources -->
			        <XamlControlsResources xmlns="using:Microsoft.UI.Xaml.Controls" />
			        <utum:MaterialToolkitTheme
			          ColorOverrideSource="ms-appx:///Styles/ColorPaletteOverride.xaml">
			          <!-- NOTE: You can override the default Roboto font by providing your font assets here. -->
			          <!-- <utum:MaterialToolkitTheme.FontOverrideDictionary>
			            <ResourceDictionary>
			              <FontFamily x:Key="MaterialLightFontFamily">ms-appx:///Uno.Fonts.Roboto/Fonts/Roboto-Light.ttf#Roboto</FontFamily>
			              <FontFamily x:Key="MaterialMediumFontFamily">ms-appx:///Uno.Fonts.Roboto/Fonts/Roboto-Medium.ttf#Roboto</FontFamily>
			              <FontFamily x:Key="MaterialRegularFontFamily">ms-appx:///Uno.Fonts.Roboto/Fonts/Roboto-Regular.ttf#Roboto</FontFamily>
			            </ResourceDictionary>
			          </utum:MaterialToolkitTheme.FontOverrideDictionary> -->
			        </utum:MaterialToolkitTheme>
			      </ResourceDictionary.MergedDictionaries>
			
			      <!-- Add resources here -->
			
			    </ResourceDictionary>
			  </Application.Resources>
			
			</Application>
			"""u8)); // Stored as UTF8 to minimize impact on assembly size / limitations
	}
	#endregion

	#region Sources for C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\MainPage.xaml
	private static (string hash, string payload) GetSources_MainPage_d7a1b33751a06f8c2b641494e8c25f72()
	{
		return (
			"9a459b15519c15f544429d74e30b1b79c8e756695a2e871057afcbbb855d9cf8", // hash
			_utf8.GetString("""
			<Page x:Class="ImmutableEditableObjectAdapter.Samples.Uno.Presentation.MainPage"
			      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			      xmlns:local="using:ImmutableEditableObjectAdapter.Samples.Uno.Presentation"
			      xmlns:uen="using:Uno.Extensions.Navigation.UI"
			      xmlns:utu="using:Uno.Toolkit.UI"
			      xmlns:um="using:Uno.Material"
			      xmlns:ui="clr-namespace:Uno.Extensions.Reactive.UI;assembly=Uno.Extensions.Reactive.UI"
			      xmlns:wuc="clr-namespace:CommunityToolkit.WinUI.UI.Controls;assembly=CommunityToolkit.WinUI.UI.Controls.DataGrid"
			      xmlns:converters="clr-namespace:ImmutableEditableObjectAdapter.Samples.Uno.Converters"
			      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
			      NavigationCacheMode="Required"
			      Background="{ThemeResource BackgroundBrush}" d:DataContext="{d:DesignInstance local:MainViewModel}">
			  <Page.Resources>
			    <converters:EditablePersonValueConverter x:Key="EditablePersonValueConverter" />
			  </Page.Resources>
			  <ScrollViewer IsTabStop="True">
			    <Grid utu:SafeArea.Insets="VisibleBounds">
			      <Grid.RowDefinitions>
			        <RowDefinition Height="Auto" />
			        <RowDefinition />
			      </Grid.RowDefinitions>
			      <utu:NavigationBar Content="{Binding Title}" />
			
			      <StackPanel Grid.Row="1"
			                  HorizontalAlignment="Center"
			                  VerticalAlignment="Center"
			                  Spacing="16">
			        <TextBox Text="{Binding Name, Mode=TwoWay}"
			                 PlaceholderText="Enter your name:" />
			        <Button Content="Go to Second Page"
			                AutomationProperties.AutomationId="SecondPageButton"
			                Command="{Binding GoToSecond}" />
			
			        <TextBox IsReadOnly="True" Header="Changed Name" Text="{Binding LastEdited.Name}" />
			        <TextBox IsReadOnly="True" Header="Changed Favourite Colour" Text="{Binding LastEdited.FavouriteColor}" />
			
			        <ui:FeedView Source="{Binding Persons, Converter={StaticResource EditablePersonValueConverter}}">
			          <ui:FeedView.ValueTemplate>
			            <DataTemplate>
			              <wuc:DataGrid
			                ItemsSource="{Binding Data, Mode=TwoWay}"
			                utu:EditableExtensions.Command="{utu:AncestorBinding Path=DataContext.PersonChanged, AncestorType=ui:FeedView}">
			              </wuc:DataGrid>
			            </DataTemplate>
			          </ui:FeedView.ValueTemplate>
			        </ui:FeedView>
			      </StackPanel>
			    </Grid>
			  </ScrollViewer>
			</Page>
			"""u8)); // Stored as UTF8 to minimize impact on assembly size / limitations
	}
	#endregion

	#region Sources for C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\SecondPage.xaml
	private static (string hash, string payload) GetSources_SecondPage_43d52a7b8ef7245df955f57a30f3e88c()
	{
		return (
			"c14c004fbb06ff7546a704fdca2319328afe5f53b860dc8af609c08f1877c0ea", // hash
			_utf8.GetString("""
			<Page x:Class="ImmutableEditableObjectAdapter.Samples.Uno.Presentation.SecondPage"
			      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			      xmlns:local="using:ImmutableEditableObjectAdapter.Samples.Uno.Presentation"
			      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			      xmlns:uen="using:Uno.Extensions.Navigation.UI"
			      xmlns:utu="using:Uno.Toolkit.UI"
			      xmlns:um="using:Uno.Material"
			      Background="{ThemeResource BackgroundBrush}">
			
			  <Grid utu:SafeArea.Insets="VisibleBounds">
			    <Grid.RowDefinitions>
			      <RowDefinition Height="Auto" />
			      <RowDefinition />
			    </Grid.RowDefinitions>
			    <utu:NavigationBar Content="Second Page" />
			    <StackPanel Grid.Row="1"
			          HorizontalAlignment="Center"
			          VerticalAlignment="Center">
			      <TextBlock Text="{Binding Entity.Name}"
			        HorizontalAlignment="Center"
			        VerticalAlignment="Center"
			        Margin="8" />
			    </StackPanel>
			
			  </Grid>
			</Page>
			"""u8)); // Stored as UTF8 to minimize impact on assembly size / limitations
	}
	#endregion

	#region Sources for C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Presentation\Shell.xaml
	private static (string hash, string payload) GetSources_Shell_06fa6f052ecac338a77d04463cc3e67a()
	{
		return (
			"840ffaee0286a43dc1f407dc3e68262041130b7b5551120c97b5118b0e6dc3c2", // hash
			_utf8.GetString("""
			<UserControl x:Class="ImmutableEditableObjectAdapter.Samples.Uno.Presentation.Shell"
			      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			      xmlns:local="using:ImmutableEditableObjectAdapter.Samples.Uno.Presentation"
			      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			      xmlns:utu="using:Uno.Toolkit.UI"
			      mc:Ignorable="d"
			      d:DesignHeight="300"
			      d:DesignWidth="400">
			  <Border Background="{ThemeResource BackgroundBrush}">
			    <utu:ExtendedSplashScreen x:Name="Splash"
			                HorizontalAlignment="Stretch"
			                VerticalAlignment="Stretch"
			                HorizontalContentAlignment="Stretch"
			                VerticalContentAlignment="Stretch">
			      <utu:ExtendedSplashScreen.LoadingContentTemplate>
			        <DataTemplate>
			          <Grid>
			            <Grid.RowDefinitions>
			              <RowDefinition Height="2*" />
			              <RowDefinition />
			            </Grid.RowDefinitions>
			
			            <ProgressRing IsActive="True"
			                  Grid.Row="1"
			                  VerticalAlignment="Center"
			                  HorizontalAlignment="Center"
			                  Height="100"
			                  Width="100" />
			          </Grid>
			        </DataTemplate>
			      </utu:ExtendedSplashScreen.LoadingContentTemplate>
			    </utu:ExtendedSplashScreen>
			  </Border>
			</UserControl>
			"""u8)); // Stored as UTF8 to minimize impact on assembly size / limitations
	}
	#endregion

	#region Sources for C:\Users\rca\Documents\cs\ImmutableEditableObjectAdapter\sample\ImmutableEditableObjectAdapter.Samples.Uno\ImmutableEditableObjectAdapter.Samples.Uno\Styles\ColorPaletteOverride.xaml
	private static (string hash, string payload) GetSources_ColorPaletteOverride_6acd3e31fd1cf74bad6fe8ae493e7985()
	{
		return (
			"45b1411627c9b54e2be6e7f9d3755462acd467e6d610565ead326c733cf326cb", // hash
			_utf8.GetString("""
			<!-- This file is generated by a tool from the file ColorPaletteOverride.zip - - YOU SHOULD NOT EDIT IT manually.-->
			<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
			  <ResourceDictionary.ThemeDictionaries>
			    <ResourceDictionary x:Key="Light">
			      <Color x:Key="PrimaryColor">#5946D2</Color>
			      <Color x:Key="OnPrimaryColor">#FFFFFF</Color>
			      <Color x:Key="PrimaryContainerColor">#E5DEFF</Color>
			      <Color x:Key="OnPrimaryContainerColor">#170065</Color>
			      <Color x:Key="SecondaryColor">#6B4EA2</Color>
			      <Color x:Key="OnSecondaryColor">#FFFFFF</Color>
			      <Color x:Key="SecondaryContainerColor">#EBDDFF</Color>
			      <Color x:Key="OnSecondaryContainerColor">#220555</Color>
			      <Color x:Key="TertiaryColor">#0061A4</Color>
			      <Color x:Key="OnTertiaryColor">#FFFFFF</Color>
			      <Color x:Key="TertiaryContainerColor">#CFE4FF</Color>
			      <Color x:Key="OnTertiaryContainerColor">#001D36</Color>
			      <Color x:Key="ErrorColor">#B3261E</Color>
			      <Color x:Key="ErrorContainerColor">#F9DEDC</Color>
			      <Color x:Key="OnErrorColor">#FFFFFF</Color>
			      <Color x:Key="OnErrorContainerColor">#410E0B</Color>
			      <Color x:Key="BackgroundColor">#FCFBFF</Color>
			      <Color x:Key="OnBackgroundColor">#1C1B1F</Color>
			      <Color x:Key="SurfaceColor">#FFFFFF</Color>
			      <Color x:Key="OnSurfaceColor">#1C1B1F</Color>
			      <Color x:Key="SurfaceVariantColor">#F2EFF5</Color>
			      <Color x:Key="OnSurfaceVariantColor">#8B8494</Color>
			      <Color x:Key="OutlineColor">#79747E</Color>
			      <Color x:Key="OnSurfaceInverseColor">#F4EFF4</Color>
			      <Color x:Key="SurfaceInverseColor">#313033</Color>
			      <Color x:Key="PrimaryInverseColor">#C8BFFF</Color>
			      <Color x:Key="SurfaceTintColor">#5946D2</Color>
			      <Color x:Key="OutlineVariantColor">#C9C5D0</Color>
			    </ResourceDictionary>
			    <ResourceDictionary x:Key="Dark">
			      <Color x:Key="PrimaryColor">#C7BFFF</Color>
			      <Color x:Key="OnPrimaryColor">#2A009F</Color>
			      <Color x:Key="PrimaryContainerColor">#4129BA</Color>
			      <Color x:Key="OnPrimaryContainerColor">#E4DFFF</Color>
			      <Color x:Key="SecondaryColor">#CDC2DC</Color>
			      <Color x:Key="OnSecondaryColor">#332D41</Color>
			      <Color x:Key="SecondaryContainerColor">#433C52</Color>
			      <Color x:Key="OnSecondaryContainerColor">#EDDFFF</Color>
			      <Color x:Key="TertiaryColor">#9FCAFF</Color>
			      <Color x:Key="OnTertiaryColor">#003258</Color>
			      <Color x:Key="TertiaryContainerColor">#00497D</Color>
			      <Color x:Key="OnTertiaryContainerColor">#D1E4FF</Color>
			      <Color x:Key="ErrorColor">#FFB4AB</Color>
			      <Color x:Key="ErrorContainerColor">#93000A</Color>
			      <Color x:Key="OnErrorColor">#690005</Color>
			      <Color x:Key="OnErrorContainerColor">#FFDAD6</Color>
			      <Color x:Key="BackgroundColor">#1C1B1F</Color>
			      <Color x:Key="OnBackgroundColor">#E5E1E6</Color>
			      <Color x:Key="SurfaceColor">#302D37</Color>
			      <Color x:Key="OnSurfaceColor">#E6E1E5</Color>
			      <Color x:Key="SurfaceVariantColor">#47464F</Color>
			      <Color x:Key="OnSurfaceVariantColor">#C9C5D0</Color>
			      <Color x:Key="OutlineColor">#928F99</Color>
			      <Color x:Key="OnSurfaceInverseColor">#1C1B1F</Color>
			      <Color x:Key="SurfaceInverseColor">#E6E1E5</Color>
			      <Color x:Key="PrimaryInverseColor">#2A009F</Color>
			      <Color x:Key="SurfaceTintColor">#C7BFFF</Color>
			      <Color x:Key="OutlineVariantColor">#57545D</Color>
			    </ResourceDictionary>
			  </ResourceDictionary.ThemeDictionaries>
			</ResourceDictionary>
			"""u8)); // Stored as UTF8 to minimize impact on assembly size / limitations
	}
	#endregion
}
