//----------------------
// <auto-generated>
//	Generated by the ViewModelGenTool_3 v3. DO NOT EDIT!
//	Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//----------------------
#pragma warning disable

using global::System;
using global::System.Linq;
using global::System.Threading.Tasks;

namespace ImmutableEditableObjectAdapter.Samples.Uno.Presentation
{


	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("ViewModelGenTool_3", "3")]
	[global::Uno.Extensions.Reactive.Bindings.Bindable(typeof(global::ImmutableEditableObjectAdapter.Samples.Uno.Presentation.MainModel))]
	public partial class MainViewModel : global::Uno.Extensions.Reactive.Bindings.BindableViewModelBase
	{
		private global::Uno.Extensions.Reactive.Bindings.Bindable<string> _name { get; set; }


		public MainViewModel(global::Microsoft.Extensions.Localization.IStringLocalizer localizer, global::Microsoft.Extensions.Options.IOptions<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.AppConfig> appInfo, global::Uno.Extensions.Navigation.INavigator navigator)
			: this(new global::ImmutableEditableObjectAdapter.Samples.Uno.Presentation.MainModel(localizer, appInfo, navigator))
		{
			if (global::Uno.Extensions.Reactive.Config.FeedConfiguration.EffectiveHotReload.HasFlag(global::Uno.Extensions.Reactive.Config.HotReloadSupport.State))
			{
				__reactiveModelArgs = new (Type, string, object?)[] { (typeof(global::Microsoft.Extensions.Localization.IStringLocalizer), "localizer", localizer as object), (typeof(global::Microsoft.Extensions.Options.IOptions<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.AppConfig>), "appInfo", appInfo as object), (typeof(global::Uno.Extensions.Navigation.INavigator), "navigator", navigator as object) };
			}
		}

		protected MainViewModel(global::ImmutableEditableObjectAdapter.Samples.Uno.Presentation.MainModel model)
		{
			var ctx = global::Uno.Extensions.Reactive.Core.SourceContext.GetOrCreate(model);

			// Share the context between Model and ViewModel
				global::Uno.Extensions.Reactive.Core.SourceContext.Set(this, ctx);
				base.RegisterDisposable(model);
				Model = model;

			model.__reactiveBindableViewModel = this;

			_name ??= new global::Uno.Extensions.Reactive.Bindings.Bindable<string>(base.Property<string>(nameof(Name), (global::Uno.Extensions.Reactive.IFeed<string>) model.Name ?? throw new NullReferenceException("The feed property 'Name' is null. Public feeds fields must be initialized in the constructor.")));
			GoToSecond = new global::Uno.Extensions.Reactive.Commands.AsyncCommand(
				nameof(GoToSecond),
				new global::Uno.Extensions.Reactive.Commands.CommandConfig[]
				{
					new global::Uno.Extensions.Reactive.Commands.CommandConfig
					{
						Execute = async (reactive_commandParameter, reactive_ct) =>
						{
							await model.GoToSecond();
						}
					}

				},
				global::Uno.Extensions.Reactive.Command.DefaultErrorHandler,
				ctx
			);
			LastEdited ??= new ImmutableEditableObjectAdapter.Samples.Uno.Models.BindablePersonViewModel(base.Property<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>(nameof(LastEdited), (global::Uno.Extensions.Reactive.IFeed<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) model.LastEdited ?? throw new NullReferenceException("The feed field 'LastEdited' is null. Public feeds fields must be initialized in the constructor.")));

			if (Persons is null)
			{
				var personsSource = (global::Uno.Extensions.Reactive.IListFeed<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) model.Persons ?? throw new NullReferenceException("The list feed property 'Persons' is null. Public feeds properties must be initialized in the constructor.");
				var personsSourceListState = ctx.GetOrCreateListState(personsSource);
				Persons = global::Uno.Extensions.Reactive.Bindings.BindableHelper.CreateBindableList(nameof(Persons), personsSourceListState);
			}
			PersonChanged = new global::Uno.Extensions.Reactive.Commands.AsyncCommand(
				nameof(PersonChanged),
				new global::Uno.Extensions.Reactive.Commands.CommandConfig[]
				{
					new global::Uno.Extensions.Reactive.Commands.CommandConfig
					{
						CanExecute = reactive_commandParameter =>
						{
							if (!(reactive_commandParameter is global::System.ComponentModel.EditedEventArgs<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>))
							{
								return false;
							}

							var reactive_arguments = (global::System.ComponentModel.EditedEventArgs<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) reactive_commandParameter;
							if (!(reactive_arguments is not null))
							{
								return false;
							}
							return true;
						}
						,
						Execute = async (reactive_commandParameter, reactive_ct) =>
						{
							var reactive_arguments = (global::System.ComponentModel.EditedEventArgs<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) reactive_commandParameter!;

							var edited = reactive_arguments;


							await model.PersonChanged(edited);
						}
					}

				},
				global::Uno.Extensions.Reactive.Command.DefaultErrorHandler,
				ctx
			);


			if (model is global::System.ComponentModel.INotifyPropertyChanged npc)
			{
				npc.PropertyChanged += __Reactive_OnModelPropertyChanged;
			}
		}

		#region Hot-reload support
		private (Type type, string name, object? value)[]? __reactiveModelArgs;

		protected override (Type type, string name, object? value)[] __Reactive_GetModelArguments()
			=> __reactiveModelArgs ?? base.__Reactive_GetModelArguments();

		#if True
		protected override void __Reactive_UpdateModel(object updatedModel)
		{
			if (Model is global::System.ComponentModel.INotifyPropertyChanged npc)
			{
				npc.PropertyChanged -= __Reactive_OnModelPropertyChanged;
			}

			var previousModel = (object)Model;

			__Reactive_BindableInitializeForUpdatedModel(updatedModel, global::Uno.Extensions.Reactive.Core.SourceContext.GetOrCreate(updatedModel));
			__Reactive_TryPatchBindableProperties(previousModel, updatedModel);

			base.RaisePropertyChanged(""); // 'Model' and any other mapped property.
		}
		#endif

		protected virtual void __Reactive_BindableInitializeForUpdatedModel(object updatedModel, global::Uno.Extensions.Reactive.Core.SourceContext ctx)
		{
			#if False
			base.__Reactive_BindableInitializeForUpdatedModel(updatedModel, ctx);
			#else
			//Model = model;
			#endif

			dynamic model = updatedModel;

			model.__reactiveBindableViewModel = this;

			try
			{

			}
			catch (Exception)
			{
				if (__Reactive_Log().IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Warning))
				{
					global::Microsoft.Extensions.Logging.LoggerExtensions.Log(
						__Reactive_Log(),
						global::Microsoft.Extensions.Logging.LogLevel.Warning,
						$"Failed to initialize 'Title' from the updated model, this member is unlikely to work properly.");
				}
			}
			try
			{
				_name ??= new global::Uno.Extensions.Reactive.Bindings.Bindable<string>(base.Property<string>(nameof(Name), (global::Uno.Extensions.Reactive.IFeed<string>) model.Name ?? throw new NullReferenceException("The feed property 'Name' is null. Public feeds fields must be initialized in the constructor.")));
			}
			catch (Exception)
			{
				if (__Reactive_Log().IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Warning))
				{
					global::Microsoft.Extensions.Logging.LoggerExtensions.Log(
						__Reactive_Log(),
						global::Microsoft.Extensions.Logging.LogLevel.Warning,
						$"Failed to initialize 'Name' from the updated model, this member is unlikely to work properly.");
				}
			}
			try
						{
							GoToSecond = new global::Uno.Extensions.Reactive.Commands.AsyncCommand(
				nameof(GoToSecond),
				new global::Uno.Extensions.Reactive.Commands.CommandConfig[]
				{
					new global::Uno.Extensions.Reactive.Commands.CommandConfig
					{
						Execute = async (reactive_commandParameter, reactive_ct) =>
						{
							await model.GoToSecond();
						}
					}

				},
				global::Uno.Extensions.Reactive.Command.DefaultErrorHandler,
				ctx
			);
						}
						catch (Exception)
						{
							if (__Reactive_Log().IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Warning))
							{
								global::Microsoft.Extensions.Logging.LoggerExtensions.Log(
									__Reactive_Log(),
									global::Microsoft.Extensions.Logging.LogLevel.Warning,
									$"Failed to initialize 'GoToSecond' from the updated model, this member is unlikely to work properly.");
							}
						}
			try
			{
				LastEdited ??= new ImmutableEditableObjectAdapter.Samples.Uno.Models.BindablePersonViewModel(base.Property<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>(nameof(LastEdited), (global::Uno.Extensions.Reactive.IFeed<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) model.LastEdited ?? throw new NullReferenceException("The feed field 'LastEdited' is null. Public feeds fields must be initialized in the constructor.")));
			}
			catch (Exception)
			{
				if (__Reactive_Log().IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Warning))
				{
					global::Microsoft.Extensions.Logging.LoggerExtensions.Log(
						__Reactive_Log(),
						global::Microsoft.Extensions.Logging.LogLevel.Warning,
						$"Failed to initialize 'LastEdited' from the updated model, this member is unlikely to work properly.");
				}
			}
			try
							{

			if (Persons is null)
			{
				var personsSource = (global::Uno.Extensions.Reactive.IListFeed<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) model.Persons ?? throw new NullReferenceException("The list feed property 'Persons' is null. Public feeds properties must be initialized in the constructor.");
				var personsSourceListState = ctx.GetOrCreateListState(personsSource);
				Persons = global::Uno.Extensions.Reactive.Bindings.BindableHelper.CreateBindableList(nameof(Persons), personsSourceListState);
			}
							}
							catch (Exception)
							{
								if (__Reactive_Log().IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Warning))
								{
									global::Microsoft.Extensions.Logging.LoggerExtensions.Log(
										__Reactive_Log(),
										global::Microsoft.Extensions.Logging.LogLevel.Warning,
										$"Failed to initialize 'Persons' from the updated model, this member is unlikely to work properly.");
								}
							}
			try
						{
							PersonChanged = new global::Uno.Extensions.Reactive.Commands.AsyncCommand(
				nameof(PersonChanged),
				new global::Uno.Extensions.Reactive.Commands.CommandConfig[]
				{
					new global::Uno.Extensions.Reactive.Commands.CommandConfig
					{
						CanExecute = reactive_commandParameter =>
						{
							if (!(reactive_commandParameter is global::System.ComponentModel.EditedEventArgs<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>))
							{
								return false;
							}

							var reactive_arguments = (global::System.ComponentModel.EditedEventArgs<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) reactive_commandParameter;
							if (!(reactive_arguments is not null))
							{
								return false;
							}
							return true;
						}
						,
						Execute = async (reactive_commandParameter, reactive_ct) =>
						{
							var reactive_arguments = (global::System.ComponentModel.EditedEventArgs<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person>) reactive_commandParameter!;

							var edited = reactive_arguments;


							await model.PersonChanged(edited);
						}
					}

				},
				global::Uno.Extensions.Reactive.Command.DefaultErrorHandler,
				ctx
			);
						}
						catch (Exception)
						{
							if (__Reactive_Log().IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Warning))
							{
								global::Microsoft.Extensions.Logging.LoggerExtensions.Log(
									__Reactive_Log(),
									global::Microsoft.Extensions.Logging.LogLevel.Warning,
									$"Failed to initialize 'PersonChanged' from the updated model, this member is unlikely to work properly.");
							}
						}


			if (model is global::System.ComponentModel.INotifyPropertyChanged npc)
			{
				npc.PropertyChanged += __Reactive_OnModelPropertyChanged;
			}
		}
		#endregion

		private void __Reactive_OnModelPropertyChanged(object? sender, global::System.ComponentModel.PropertyChangedEventArgs args)
			=> base.RaisePropertyChanged(args.PropertyName);

		public global::ImmutableEditableObjectAdapter.Samples.Uno.Presentation.MainModel Model { get; private set; }

		public string Title
		{
			get => Model.Title;
		}

		public string Name
		{
			get => _name.GetValue();
			set => _name.SetValue(value);
		}

		public global::Uno.Extensions.Reactive.IAsyncCommand GoToSecond { get; private set; }
		public ImmutableEditableObjectAdapter.Samples.Uno.Models.BindablePersonViewModel LastEdited { get; private set; }
		public global::Uno.Extensions.Reactive.IListFeed<global::ImmutableEditableObjectAdapter.Samples.Uno.Models.Person> Persons { get; private set; }
		public global::Uno.Extensions.Reactive.IAsyncCommand PersonChanged { get; private set; }
	}

}